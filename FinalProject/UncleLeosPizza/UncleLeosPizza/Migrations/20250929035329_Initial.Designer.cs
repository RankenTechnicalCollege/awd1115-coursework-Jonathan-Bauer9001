// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UncleLeosPizza.Models;

#nullable disable

namespace UncleLeosPizza.Migrations
{
    [DbContext(typeof(UncleLeosContext))]
    [Migration("20250929035329_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("UncleLeosPizza.Models.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = "Pizza",
                            Name = "Pizza"
                        },
                        new
                        {
                            CategoryId = "Salad",
                            Name = "Salad"
                        },
                        new
                        {
                            CategoryId = "Appetizer",
                            Name = "Appetizer"
                        },
                        new
                        {
                            CategoryId = "Dessert",
                            Name = "Dessert"
                        },
                        new
                        {
                            CategoryId = "Beverage",
                            Name = "Beverage"
                        },
                        new
                        {
                            CategoryId = "Merchandise",
                            Name = "Merchandise"
                        });
                });

            modelBuilder.Entity("UncleLeosPizza.Models.Item", b =>
                {
                    b.Property<string>("ItemId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            ItemId = "1",
                            CategoryId = "Pizza",
                            Description = "Classic cheese pizza with tomato sauce and mozzarella cheese",
                            Name = "Cheese Pizza"
                        },
                        new
                        {
                            ItemId = "2",
                            CategoryId = "Pizza",
                            Description = "Pepperoni pizza with tomato sauce and mozzarella cheese",
                            Name = "Pepperoni Pizza"
                        },
                        new
                        {
                            ItemId = "3",
                            CategoryId = "Pizza",
                            Description = "Vegetarian pizza with tomato sauce, mozzarella cheese, bell peppers, onions, and mushrooms",
                            Name = "Veggie Pizza"
                        },
                        new
                        {
                            ItemId = "4",
                            CategoryId = "Salad",
                            Description = "Crisp romaine lettuce, croutons, and Caesar dressing",
                            Name = "Caesar Salad"
                        },
                        new
                        {
                            ItemId = "5",
                            CategoryId = "Salad",
                            Description = "Mixed greens, feta cheese, olives, cucumbers, and tomatoes with Greek dressing",
                            Name = "Greek Salad"
                        },
                        new
                        {
                            ItemId = "6",
                            CategoryId = "Appetizer",
                            Description = "Spicy buffalo wings served with blue cheese dressing",
                            Name = "Chicken Wings"
                        });
                });

            modelBuilder.Entity("UncleLeosPizza.Models.ItemSize", b =>
                {
                    b.Property<string>("ItemSizeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SizeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ItemSizeId");

                    b.HasIndex("ItemId");

                    b.HasIndex("SizeId");

                    b.ToTable("ItemSizes");
                });

            modelBuilder.Entity("UncleLeosPizza.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("UncleLeosPizza.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId1")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("OrderId1");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("UncleLeosPizza.Models.Size", b =>
                {
                    b.Property<string>("SizeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SizeId");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            SizeId = "Small",
                            Name = "Small"
                        },
                        new
                        {
                            SizeId = "Medium",
                            Name = "Medium"
                        },
                        new
                        {
                            SizeId = "Large",
                            Name = "Large"
                        });
                });

            modelBuilder.Entity("UncleLeosPizza.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UncleLeosPizza.Models.Item", b =>
                {
                    b.HasOne("UncleLeosPizza.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("UncleLeosPizza.Models.ItemSize", b =>
                {
                    b.HasOne("UncleLeosPizza.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UncleLeosPizza.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("UncleLeosPizza.Models.Order", b =>
                {
                    b.HasOne("UncleLeosPizza.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UncleLeosPizza.Models.OrderItem", b =>
                {
                    b.HasOne("UncleLeosPizza.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UncleLeosPizza.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Order");
                });
#pragma warning restore 612, 618
        }
    }
}
